{"version":3,"sources":["components/DeviceState/DeviceState.js","components/Header/Header.js","App.js","reportWebVitals.js","index.js"],"names":["DeviceState","props","theme","responsiveFontSizes","createMuiTheme","typography","h1","fontSize","h2","portReader","portWriter","rawData","role","state","printOutCom","toggleToRefresh","checked","percentage","started","continuousTest","queryInterval","initializePEVStrings","pevSendStartCommand","bind","pevSendStopCommand","handleContToggleSwitch","showDetailedProgress","showLinkPanel","setContinuosState","resetLinkMeasurementsList","linkMeasurements","timeoutStartInterval","timeoutStopInterval","console","log","data","Uint8Array","this","write","then","res","setState","event","clearInterval","pevStrings","details","display","found","warning","timerValue","timeoutStartCounter","setInterval","timeoutStopCounter","setTimedoutStartCommand","OpenReadComPort","sCommand","length","includes","nowFound","i","measurementValue","split","Number","trim","push","setTimedoutStopCommand","warn","percCalc","Math","round","commandArray","forEach","item","ProcessSplittedCommand","read","value","TextDecoder","decode","setTimeout","ProcessRawData","ReadValues","port","p_Port","open","baudRate","readable","getReader","writable","getWriter","map","index","style","color","textShadow","id","className","textAlign","justifyContent","float","height","width","onClick","Grid","container","xs","marginTop","marginLeft","Component","Header","Contact","App","p1","selected","onClickHandler","selectCom1","p2","selectCom2","supported","navigator","serial","getPorts","portList","slotId","requestPort","error","AskUserForComport","path","prepareComPortSelectButtons","justify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0284f3a0.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\nimport { createMuiTheme, responsiveFontSizes} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './DeviceState.css'\r\n\r\n\r\nclass DeviceState extends Component{\r\n\r\n    \r\n    pevSendStartCommand(){\r\n        console.log(\"Send Start Command\")\r\n        const data = new Uint8Array([32]); // space\r\n            this.portWriter.write(data).then(res=>{\r\n            });\r\n        this.setState({  printOutCom : this.printOutCom,\r\n            toggleToRefresh : this.toggleToRefresh,\r\n            role : this.state.role  ,\r\n            percentage : 0,\r\n            started : true,\r\n            continuousTest : this.state.continuousTest\r\n        })\r\n    }\r\n    handleContToggleSwitch(event){\r\n\r\n    }\r\n\r\n    pevSendStopCommand(){\r\n        const data = new Uint8Array([100]); // d\r\n        this.portWriter.write(data).then(res=>{\r\n        });\r\n\r\n        clearInterval( this.timeoutStartInterval );\r\n        clearInterval( this.timeoutStopInterval );\r\n\r\n        this.initializePEVStrings();\r\n        this.setState({  \r\n            printOutCom : this.printOutCom,\r\n            toggleToRefresh : true,\r\n            role : this.role,\r\n            percentage : 0,\r\n            started : false,\r\n            continuousTest : this.state.continuousTest\r\n        })\r\n    }\r\n    initializePEVStrings(){\r\n        this.pevStrings = [\r\n            {details : \"PIB image reading completed OK\",display : \"PIB image reading completed OK\",found : false,warning : false},\r\n            {details : \"CM_SLAC_PARAM.REQ sent\",display : \"CM_SLAC_PARAM.REQ sent\",found : false,warning : false},\r\n            {details : \"CM_SLAC_PARAM.CNF received\",display : \"CM_SLAC_PARAM.CNF received\",found : false,warning : false},\r\n            {details : \"CM_START_ATTEN_CHAR.IND sent\",display : \"CM_START_ATTEN_CHAR.IND sent\",found : false,warning : false},\r\n            {details : \"CM_MNBC_SOUND.IND sent\",display : \"CM_MNBC_SOUND.IND sent\",found : false,warning : false},\r\n            {details : \"CM_ATTEN_CHAR.IND received\",display : \"CM_ATTEN_CHAR.IND received\",found : false,warning : false},\r\n            {details : \"CM_ATTEN_CHAR.RSP sent\",display : \"CM_ATTEN_CHAR.RSP sent\",found : false,warning : false},\r\n            {details : \"CM_VALIDATE.REQ sent\",display : \"CM_VALIDATE.REQ sent\",found : false,warning : false},\r\n            {details : \"CM_VALIDATE.CNF received. -Charger Ready-\",display : \"Charger Ready\",found : false,warning : false},\t\r\n            {details : \"CM_VALIDATE.CNF received. -Charger Success-\",display : \"Charger Success\",found : false,warning : false},\t\r\n            {details : \"CM_SET_KEY.CNF received\",display : \"CM_SET_KEY.CNF received\",found : false,warning : false},\t\r\n            {details : \"New keys set\",display : \"New keys set\",found : false,warning : false},\t\r\n            {details : \"Link Measurement:\",display : \"Link Measurement:\",found : false,warning : false},\t\r\n            {details : \"Sending IPv6.\",display : \"Sending IPv6.\",found : false,warning : false},\t\r\n            {details : \"IPv6 Message is received\",display : \"IPv6 Message is received\",found : false,warning : false},\t\r\n            {details : \"TIMEOUT\",display : \"Timeout Occured\",found : false,warning : true},\t\r\n            {details : \"TIMEOUT FOR CONNECT\",display : \"Timeout To Reconnect\",found : false,warning : false},\t\r\n        ]\r\n        \r\n        \r\n    }\r\n\r\n\r\n    setTimedoutStartCommand(timerValue){\r\n        var timeoutStartCounter = timerValue\r\n        console.log(\"setTimedoutStartCommand | begin\")\r\n        this.timeoutStartInterval = setInterval(() => {\r\n            if(timeoutStartCounter-- > 3){\r\n                this.pevStrings[16].display = \"Reconnecting in \"+timeoutStartCounter+\" sec(s).\"  \r\n                this.pevStrings[16].found = true \r\n                console.log(\"setTimedoutStartCommand | set text to \",this.pevStrings[16].display)\r\n                this.setState({  \r\n                    printOutCom : this.printOutCom,\r\n                    toggleToRefresh : !this.state.toggleToRefresh,\r\n                    role : this.state.role  ,\r\n                    percentage : this.state.percentage,\r\n                    started : true,\r\n                    continuousTest : this.state.continuousTest\r\n                })\r\n            }\r\n            else{\r\n                this.pevStrings[16].found = false\r\n                console.log(\"setTimedoutStartCommand | SEND start\")\r\n                this.pevSendStartCommand();\r\n                this.setState({  \r\n                    printOutCom : this.printOutCom,\r\n                    toggleToRefresh : !this.state.toggleToRefresh,\r\n                    role : this.state.role  ,\r\n                    percentage : this.state.percentage,\r\n                    started : true,\r\n                    continuousTest : this.state.continuousTest\r\n                })\r\n                clearInterval( this.timeoutStartInterval );\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n\r\n    setTimedoutStopCommand(timerValue){\r\n        var timeoutStopCounter = timerValue\r\n        this.timeoutStopInterval = setInterval(() => {\r\n            if(timeoutStopCounter-- > 0){\r\n                this.pevStrings[15].display = \"Disconnecting in \"+timeoutStopCounter+\" sec(s).\"\r\n                this.pevStrings[15].found = true\r\n                console.log(\"setInterval | set text to \",this.pevStrings[15].display)\r\n                this.setState({  \r\n                    printOutCom : this.printOutCom,\r\n                    toggleToRefresh : !this.state.toggleToRefresh,\r\n                    role : this.state.role  ,\r\n                    percentage : this.state.percentage,\r\n                    started : true,\r\n                    continuousTest : this.state.continuousTest\r\n                })\r\n            }\r\n            else{\r\n                console.log(\"setInterval | SEND Stop\")\r\n                this.pevSendStopCommand();\r\n                this.pevStrings[15].found = false\r\n                this.setTimedoutStartCommand(20);\r\n                clearInterval( this.timeoutStopInterval );\r\n            }\r\n        }, 1000);\r\n    }\r\n  \r\n  \r\n    componentDidMount(){\r\n        this.OpenReadComPort();\r\n    }\r\n\r\n    ProcessSplittedCommand(sCommand){\r\n        if(sCommand.length > 5){\r\n            if(sCommand.includes(\"ROLE:PEV\"))\r\n            {\r\n                    this.role = \"PEV\";\r\n                    clearInterval(this.queryInterval);\r\n                    this.setState({  printOutCom : this.printOutCom,\r\n                                        toggleToRefresh : this.toggleToRefresh,\r\n                                        role : this.role  ,\r\n                                        percentage : this.state.percentage,\r\n                                        started : this.state.started,\r\n                                        continuousTest : this.state.continuousTest\r\n                                    })\r\n            }\r\n            else if(sCommand.includes(\"ROLE:EVSE\"))\r\n            {\r\n                    this.role = \"EVSE\";\r\n                    clearInterval(this.queryInterval);\r\n                    this.setState({  printOutCom : this.printOutCom,\r\n                                        toggleToRefresh : this.toggleToRefresh,\r\n                                        role : this.role ,\r\n                                        percentage : this.state.percentage,\r\n                                        started : this.state.started,\r\n                                        continuousTest : this.state.continuousTest  })\r\n            }else{\r\n                    let nowFound = false;\r\n                    for(let i=0;i<this.pevStrings.length;i++){\r\n                        if(sCommand.includes(this.pevStrings[i].details) && this.pevStrings[i].found === false){\r\n                            this.pevStrings[i].found = true\r\n                            nowFound = true\r\n                            //console.log(\"ProcessSplittedCommand sCommand i=\", i)\r\n                            if(i === 12)//Link Measurement\r\n                            {\r\n                                \r\n                                let measurementValue = sCommand.split(':')\r\n                                if(measurementValue.length>1){\r\n                                    this.pevStrings[12].display = \"Link Measurement: \"+Number(measurementValue[1].trim())+\"ms.\"\r\n                                    this.linkMeasurements.push(measurementValue[1].trim())\r\n                                }\r\n                            }\r\n                            else if(i === 13 && this.state.continuousTest === true)// IPv6 Message\r\n                            {\r\n                                //setTimeout(()=>{this.pevSendStopCommand()},15000);\r\n                                this.setTimedoutStopCommand(15);\r\n                            }else if(i === 0 && this.state.continuousTest === true)// PIB image reading completed OK\r\n                            {\r\n                                //setTimeout(()=>{this.pevSendStartCommand()},5000);\r\n                            }else if(i === 15)// TIMEOUT\r\n                            {\r\n                                console.warn(\"ProcessSplittedCommand  | this.linkMeasurements.push(Timeout) \")\r\n                                this.linkMeasurements.push(\"Timeout\")\r\n                                if(this.state.continuousTest === true)\r\n                                {\r\n                                    this.setTimedoutStopCommand(5);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(nowFound === true){\r\n                        console.warn(\"OKKKKKKKK\")\r\n                        let percCalc = this.state.percentage + ((1 / (this.pevStrings.length-1)) * 100)\r\n                        if(percCalc >= 90)\r\n                            percCalc = 100;\r\n                        \r\n                        percCalc = Math.round(percCalc)\r\n\r\n                        this.setState({  \r\n                            printOutCom : this.printOutCom,\r\n                            toggleToRefresh : !this.state.toggleToRefresh,\r\n                            role : this.role  ,\r\n                            percentage : percCalc,\r\n                            started : true,\r\n                            continuousTest : this.state.continuousTest\r\n                        })\r\n                    }\r\n            }\r\n        }\r\n        \r\n\r\n                       \r\n    }\r\n\r\n\r\n\r\n    ProcessRawData(){\r\n        let commandArray = this.rawData.split('*')\r\n        if(commandArray.length>1){\r\n            commandArray.forEach(item=>{\r\n                this.ProcessSplittedCommand(item)\r\n            })\r\n            this.rawData = commandArray[commandArray.length-1]\r\n        }\r\n        \r\n    }\r\n\r\n    ReadValues(){\r\n        this.portReader.read().then(res=>{\r\n            console.log(\"VALUE \",res.value)\r\n            this.rawData += new TextDecoder(\"utf-8\").decode(res.value)\r\n            console.log(\"rawData \",this.rawData)\r\n            \r\n            setTimeout(this.ProcessRawData(),0);\r\n            this.ReadValues();\r\n        });\r\n    }\r\n\r\n    \r\n    async OpenReadComPort(){\r\n        console.log(\"OpenReadComPort | begin\")\r\n\r\n        console.log(\"Port..\",this.props.port)\r\n        const p_Port = this.props.port\r\n\r\n        await p_Port.port.open({ baudRate: 115200});\r\n        this.portReader = p_Port.port.readable.getReader();\r\n\r\n        this.portWriter = p_Port.port.writable.getWriter();\r\n        \r\n\r\n        setTimeout(()=>{\r\n            this.ReadValues()\r\n        },0)\r\n\r\n        const data = new Uint8Array([114]); // r\r\n        this.portWriter.write(data).then(res=>{\r\n        });\r\n        console.log(\"ask role\")\r\n        \r\n       \r\n        console.log(\"OpenReadComPort | end\")\r\n    }\r\n\r\n\r\n    constructor(props){\r\n        super(props)\r\n        \r\n        \r\n        this.theme = responsiveFontSizes(createMuiTheme(\r\n            {typography: {\r\n                h1: {\r\n                    fontSize: 200,\r\n                },\r\n                h2: {\r\n                    fontSize: 15,\r\n                },\r\n            },}\r\n        ));\r\n        this.portReader = {}\r\n        this.portWriter = {}\r\n        this.rawData = \"\"\r\n        this.role = \"\"\r\n        this.state = {\r\n            printOutCom : \"\",\r\n            toggleToRefresh : false,\r\n            role : \"PEV\",\r\n            checked : false,  \r\n            percentage : 0,\r\n            started : false,\r\n            continuousTest : false\r\n          };\r\n\r\n        this.queryInterval = {}\r\n        this.initializePEVStrings()\r\n        this.pevSendStartCommand = this.pevSendStartCommand.bind(this)\r\n        this.pevSendStopCommand = this.pevSendStopCommand.bind(this)\r\n        this.handleContToggleSwitch = this.handleContToggleSwitch.bind(this)\r\n        this.showDetailedProgress = this.showDetailedProgress.bind(this)\r\n        this.showLinkPanel = this.showLinkPanel.bind(this)\r\n        this.setContinuosState = this.setContinuosState.bind(this)\r\n        this.resetLinkMeasurementsList = this.resetLinkMeasurementsList.bind(this)\r\n        this.linkMeasurements = []\r\n        \r\n        this.timeoutStartInterval = {}\r\n        this.timeoutStopInterval = {}\r\n        \r\n\r\n    }\r\n\r\n    resetLinkMeasurementsList(){\r\n        this.linkMeasurements = []\r\n        this.setState({  \r\n            printOutCom : this.printOutCom,\r\n            toggleToRefresh : !this.state.toggleToRefresh,\r\n            role : this.state.role  ,\r\n            percentage : this.state.percentage,\r\n            started : this.state.started,\r\n            continuousTest : this.state.continuousTest\r\n        })\r\n    }\r\n  \r\n    showDetailedProgress(){\r\n        if(this.pevStrings != null && this.pevStrings.length > 0)\r\n        {\r\n            \r\n            return this.pevStrings.map((value,index)=>{\r\n                if(value.found)\r\n                {\r\n                    if(value.warning === false){\r\n                        return(\r\n                            <p key={\"detailed_\"+index}>\r\n                                {value.display}{index<15 ? \".......................................OK\" : \"\"}\r\n                            </p>\r\n                        );\r\n                    }\r\n                    else{\r\n                        return(\r\n                            <p key={\"detailed_\"+index} style={{color:'#c20b0b',\r\n                                                               textShadow: '0 0 0.4em #c20b0b'\r\n                                                               }} id='warningTextFeature'>\r\n                                {value.display}\r\n                            </p>\r\n                        );\r\n                    }\r\n                }else{\r\n                    return null;\r\n                }\r\n            })\r\n              \r\n        }\r\n        else{\r\n            return null;\r\n        }\r\n    }\r\n    showLinkPanel(){\r\n        console.log(\"Show Link Panel\",this.linkMeasurements.length)\r\n        if(this.linkMeasurements != null && this.linkMeasurements.length > 0)\r\n        { \r\n            return(\r\n                <div  id='linkpanelid1'>\r\n                <div className=\"ui panel\">\r\n                    <div className=\"ui panel content\">\r\n                    {\r\n                        this.linkMeasurements.map((value,index)=>{\r\n                            if(value === \"Timeout\")\r\n                            {\r\n                                return(\r\n                                    <div key={'mydivkey'+index}>\r\n                                    <strong key={'mykey'+index} style={{color:'#c20b0b',\r\n                                                               textShadow: '0 0 0.4em #c20b0b'\r\n                                                               }} >{value}</strong><br /> \r\n                                    </div>\r\n                                );\r\n                            }\r\n                            else{\r\n                                return(\r\n                                    <div key={'mydivkey'+index}>\r\n                                    <strong key={'mykey'+index}>Link Time</strong> {value} ms.<br /> \r\n                                    </div>\r\n                                );\r\n                            }\r\n                            \r\n                        })\r\n                    }    \r\n                    <div style = {{ textAlign:'right' , justifyContent: 'right' , float: 'right' , height: '50px', width: '50px' }}> <div  className='linkMeasurementsReset ' onClick={this.resetLinkMeasurementsList} /> </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return null;\r\n        }\r\n    }\r\n\r\n    setContinuosState(){\r\n        this.setState({  printOutCom : this.printOutCom,\r\n            toggleToRefresh : this.state.toggleToRefresh,\r\n            role : this.state.role  ,\r\n            percentage : this.state.percentage,\r\n            started : this.state.started,\r\n            continuousTest : !this.state.continuousTest\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1 className=\"cs\">FoE-Charger</h1>\r\n                    <div className=\"circle cir\"><p className=\"c\">F</p>\r\n                    <div className=\"circle one\"></div>\r\n                    <div className=\"circle two\">\r\n                        <div className=\"circle three\">\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n\r\n                    <div className=\"wrapper\">\r\n                    <div className=\"bar left\"></div>\r\n                    <div className=\"bar top\"></div>\r\n                    <div className=\"bar right\"></div>\r\n                    <div className=\"bar bottom\"></div>\r\n                    <br/>\r\n                    <Grid container>\r\n                    <Grid item xs={2}>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                    <div className='Action_button_1' onClick={this.pevSendStartCommand}/>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                    <div className='Action_button_2' onClick={this.pevSendStopCommand}/>\r\n                    </Grid>\r\n                    <Grid item xs={2} >\r\n                        <div style={{marginTop: '20px'}}>\r\n                            <span className='continuousText'>Continuous Test</span>\r\n                            {\r\n                                this.state.continuousTest ? \r\n                                    <div style={{marginLeft: '30px'}} className='continuousSelectionSelected' onClick={this.setContinuosState} />: \r\n                                    <div style={{marginLeft: '30px'}} className='continuousSelectionUnselected' onClick={this.setContinuosState} /> \r\n                            }\r\n                            \r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                    </Grid>\r\n                    <Grid item xs={2} >\r\n                        <div className='parentWheel'>\r\n                            <div className='Outer_wheel'/>\r\n                            <div className='Wheel_Base'/>\r\n                            {this.state.started ? <div className='Ineer_wheel Ineer_wheel_Animation'/> : <div className='Ineer_wheel'/>}\r\n                            <div className='Percentage_wheel'><span id='percentage'>{this.state.percentage}</span>%</div>\r\n                        </div>\r\n                    \r\n                    </Grid>\r\n                    </Grid>\r\n                    \r\n                    \r\n                    <Grid container>\r\n                    <Grid item xs={6}>\r\n                        {this.showDetailedProgress()}\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                    {this.showLinkPanel()}\r\n                    </Grid>\r\n                    </Grid>                \r\n                    \r\n                    </div>\r\n            </div>\r\n            );\r\n    }\r\n\r\n/*\r\n<ol className=\"timeline\">\r\n                        <li>list item</li>\r\n                        <li>list item</li>\r\n                    </ol>\r\n*/\r\n\r\n}\r\nexport default DeviceState","import React from \"react\";\r\n\r\nimport './Header.css'\r\n\r\n\r\n\r\nexport default function Header() {\r\n\r\n\r\n  return (\r\n    <div className=\"bodyWrapper\">\r\n    <header>\r\n      <div className=\"signBlock\">\r\n        <div className=\"topCover\"></div>\r\n          <div className=\"headerContent\">\r\n            <div className=\"headerLinks\">\r\n            <h1>PONTIS EMC</h1>\r\n                <div className=\"signLinks\">\r\n                <h3>Test Web Interface</h3>\r\n                </div>       \r\n            </div>\r\n          </div>\r\n            <div className=\"boxEdges1\">\r\n              <div className=\"boxEdges2\">\r\n                <div className=\"slider\"></div>\r\n                <div className=\"headerLine\"></div>\r\n              </div>\r\n            </div>\r\n        </div>\r\n    </header>\r\n    <body-container>\r\n     \r\n    </body-container>\r\n    <footer>\r\n      \r\n    </footer>\r\n  </div>\r\n  );\r\n}\r\n\r\n","import React, {Component} from \"react\";\r\nimport DeviceState from './components/DeviceState/DeviceState'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Header from \"./components/Header/Header\"\r\nimport './App.css';\r\n\r\nconst Contact = props => {\r\n  return(\r\n      <div>\r\n        Contact Page\r\n      </div>\r\n    )\r\n}\r\n\r\n/*\r\nconst isChrome = !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime);\r\nconst isOpera = (!!window.opr) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\r\nconst isFirefox = typeof InstallTrigger !== 'undefined';\r\nconst isIE = false || !!document.documentMode;\r\nconst isEdge = !isIE && !!window.StyleMedia;\r\n*/\r\n\r\n\r\nclass App extends Component{\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      p1 :\r\n        {id: 1, selected : false, port : {},onClickHandler:this.selectCom1},\r\n      p2 :\r\n        {id: 2, selected : false, port : {},onClickHandler:this.selectCom2},\r\n      supported : false\r\n    };\r\n\r\n    this.selectCom1 = this.selectCom1.bind(this)\r\n    this.selectCom2 = this.selectCom2.bind(this)\r\n  }\r\n  \r\n\r\n  \r\n  \r\n  async componentDidMount(){\r\n    try{\r\n    console.log(\"list of serial ports the website has been granted access to previously\",navigator.serial.getPorts())\r\n\r\n      const portList = await navigator.serial.getPorts()\r\n    \r\n      if(portList.length === 2){\r\n        this.setState(\r\n          {\r\n            p1 : {id: portList[0].id, selected : true, port : portList[0]},\r\n            p2 : {id: portList[1].id, selected : false, port : portList[1]},\r\n            supported : true\r\n          }\r\n        )\r\n      }else if(portList.length === 1){\r\n        this.setState(\r\n          {\r\n            p1 : {id: portList[0].id, selected : true, port : portList[0]},\r\n            p2 : this.state.p2,\r\n            supported : true\r\n          }\r\n        )\r\n      }\r\n    }catch(err){\r\n      this.setState(\r\n        {\r\n          p1 : this.state.p1,\r\n          p2 : this.state.p2,\r\n          supported : false\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n  async AskUserForComport(slotId){\r\n    try {\r\n      \r\n      switch(slotId){\r\n      case 1:\r\n        if(!this.state.p1.selected){\r\n          console.log(\"list of serial ports the website has been granted access to previously\",navigator.serial.getPorts())\r\n          const p1 = await navigator.serial.requestPort()\r\n          console.log(\"AskUserForComport p1\",p1)\r\n          this.setState(\r\n            {\r\n              p1 : {id: this.state.p1.id, selected : true, port : p1},\r\n              p2 : this.state.p2,\r\n              supported : this.supported\r\n            }\r\n          )\r\n\r\n        }\r\n        break;\r\n\r\n      case 2:\r\n        if(!this.state.p2.selected){\r\n          const p2 = await navigator.serial.requestPort()\r\n          \r\n          this.setState(\r\n            {\r\n              p1 : this.state.p1,\r\n              p2 : {id: this.state.p2.id, selected : true, port : p2},\r\n              supported : this.supported\r\n            }\r\n          )\r\n\r\n        }\r\n        break;\r\n        default:\r\n          console.error(\"Default switch-case\")\r\n          break;\r\n    }\r\n  } catch (err) {\r\n    console.log(\"An error was caught: \", err);\r\n  }\r\n  }\r\n \r\n\r\n  async selectCom1(){\r\n      this.AskUserForComport(1)   \r\n  }\r\n\r\n\r\n  async selectCom2(){\r\n      this.AskUserForComport(2)   \r\n  }\r\n\r\n\r\n  prepareComPortSelectButtons(){\r\n    console.log(\"Create Message box\")\r\n    if(this.state.supported){\r\n      if(this.state.p1.selected === false)\r\n      return(\r\n        <div className='parentMessageBox'>\r\n            <div className='messageBoxSelectButton' onClick={this.selectCom1} key=\"c1\"/>\r\n        </div>  \r\n        )\r\n      else\r\n        return null;\r\n    }else{\r\n      return(\r\n        <div>\r\n          <div className='warningMessageBox'>\r\n          </div>  \r\n        </div>\r\n        )\r\n    }\r\n    \r\n  }\r\n\r\n\r\n  render(){\r\n    console.log(\"render....\")\r\n  return (\r\n    <div >\r\n      <Header/>\r\n      <Router>\r\n      <Switch>\r\n        <Route path=\"/contact\">\r\n          <Contact />\r\n        </Route>\r\n        <Route>\r\n          {this.prepareComPortSelectButtons()}\r\n          <Grid container justify='center'>\r\n            <Grid item xs={12}>\r\n              <div>\r\n                {this.state.p1.selected === true ? <DeviceState port={this.state.p1}/ > : null}\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Route>\r\n      </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}