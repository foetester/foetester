{"version":3,"sources":["components/DeviceState/DeviceState.js","components/Header/Header.js","components/Contact/Contact.js","components/About/About.js","App.js","reportWebVitals.js","index.js"],"names":["DeviceState","props","theme","responsiveFontSizes","createMuiTheme","typography","h1","fontSize","h2","portReader","portWriter","rawData","role","state","printOutCom","toggleToRefresh","checked","percentage","started","continuousTest","queryInterval","initializePEVStrings","pevSendStartCommand","bind","pevSendStopCommand","handleContToggleSwitch","showDetailedProgress","showLinkPanel","setContinuosState","resetLinkMeasurementsList","linkMeasurements","timeoutStartInterval","timeoutStopInterval","console","log","data","Uint8Array","this","write","then","res","setState","event","clearInterval","pevStrings","details","display","found","warning","timerValue","timeoutStartCounter","setInterval","timeoutStopCounter","setTimedoutStartCommand","OpenReadComPort","sCommand","length","includes","nowFound","i","measurementValue","split","Number","trim","push","setTimedoutStopCommand","warn","percCalc","Math","round","commandArray","forEach","item","ProcessSplittedCommand","read","value","TextDecoder","decode","setTimeout","ProcessRawData","ReadValues","port","p_Port","open","baudRate","close","readable","getReader","writable","getWriter","map","index","style","color","textShadow","id","className","textAlign","justifyContent","float","height","width","onClick","Grid","container","xs","marginTop","marginLeft","Component","Header","toggle","setCollapsibleElement","ref","to","counter","text","React","useState","textVal","setTextVal","useEffect","interval","substr","About","App","p1","selected","onClickHandler","selectCom1","p2","selectCom2","supported","navigator","serial","getPorts","portList","bSupport","message","slotId","requestPort","error","AskUserForComport","e","err","exact","path","prepareComPortSelectButtons","justify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5f2c614.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\nimport { createMuiTheme, responsiveFontSizes} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './DeviceState.css'\r\n\r\n\r\nclass DeviceState extends Component{\r\n\r\n    \r\n    pevSendStartCommand(){\r\n        console.log(\"Send Start Command\")\r\n        const data = new Uint8Array([32]); // space\r\n            this.portWriter.write(data).then(res=>{\r\n            });\r\n        this.setState({  printOutCom : this.printOutCom,\r\n            toggleToRefresh : this.toggleToRefresh,\r\n            role : this.state.role  ,\r\n            percentage : 0,\r\n            started : true,\r\n            continuousTest : this.state.continuousTest\r\n        })\r\n    }\r\n    handleContToggleSwitch(event){\r\n\r\n    }\r\n\r\n    pevSendStopCommand(){\r\n        const data = new Uint8Array([100]); // d\r\n        this.portWriter.write(data).then(res=>{\r\n        });\r\n\r\n        clearInterval( this.timeoutStartInterval );\r\n        clearInterval( this.timeoutStopInterval );\r\n\r\n        this.initializePEVStrings();\r\n        this.setState({  \r\n            printOutCom : this.printOutCom,\r\n            toggleToRefresh : true,\r\n            role : this.role,\r\n            percentage : 0,\r\n            started : false,\r\n            continuousTest : this.state.continuousTest\r\n        })\r\n    }\r\n    initializePEVStrings(){\r\n        this.pevStrings = [\r\n            //{details : \"PIB image reading completed OK\",display : \"PIB image reading completed OK\",found : false,warning : false},\r\n            {details : \"CM_SLAC_PARAM.REQ sent\",display : \"CM_SLAC_PARAM.REQ sent\",found : false,warning : false},\r\n            {details : \"CM_SLAC_PARAM.CNF received\",display : \"CM_SLAC_PARAM.CNF received\",found : false,warning : false},\r\n            {details : \"CM_START_ATTEN_CHAR.IND sent\",display : \"CM_START_ATTEN_CHAR.IND sent\",found : false,warning : false},\r\n            {details : \"CM_MNBC_SOUND.IND sent\",display : \"CM_MNBC_SOUND.IND sent\",found : false,warning : false},\r\n            {details : \"CM_ATTEN_CHAR.IND received\",display : \"CM_ATTEN_CHAR.IND received\",found : false,warning : false},\r\n            {details : \"CM_ATTEN_CHAR.RSP sent\",display : \"CM_ATTEN_CHAR.RSP sent\",found : false,warning : false},\r\n            {details : \"CM_SLAC_MATCH.REQ sent\",display : \"CM_SLAC_MATCH.REQ sent\",found : false,warning : false},\r\n            {details : \"CM_SLAC_MATCH.CNF received\",display : \"CM_SLAC_MATCH.CNF received\",found : false,warning : false},\t\r\n            //{details : \"Keys are Set\",display : \"Keys are Set\",found : false,warning : false},\t\r\n            //{details : \"CM_SET_KEY.CNF received\",display : \"CM_SET_KEY.CNF received\",found : false,warning : false},\t\r\n            //{details : \"New keys set\",display : \"New keys set\",found : false,warning : false},\t\r\n            {details : \"Link Measurement:\",display : \"Link Measurement:\",found : false,warning : false},\t\r\n            {details : \"Sending IPv6.\",display : \"Sending IPv6.\",found : false,warning : false},\t\r\n            {details : \"IPv6 Message is received\",display : \"IPv6 Message is received\",found : false,warning : false},\t\r\n            {details : \"TIMEOUT\",display : \"Timeout Occured\",found : false,warning : true},\t\r\n            {details : \"TIMEOUT FOR CONNECT\",display : \"Timeout To Reconnect\",found : false,warning : false},\t\r\n        ]\r\n        \r\n        \r\n    }\r\n\r\n\r\n    setTimedoutStartCommand(timerValue){\r\n        var timeoutStartCounter = timerValue\r\n        console.log(\"setTimedoutStartCommand | begin\")\r\n        this.timeoutStartInterval = setInterval(() => {\r\n            if(timeoutStartCounter-- > 3){\r\n                this.pevStrings[12].display = \"Reconnecting in \"+timeoutStartCounter+\" sec(s).\"  \r\n                this.pevStrings[12].found = true \r\n                console.log(\"setTimedoutStartCommand | set text to \",this.pevStrings[12].display)\r\n                this.setState({  \r\n                    printOutCom : this.printOutCom,\r\n                    toggleToRefresh : !this.state.toggleToRefresh,\r\n                    role : this.state.role  ,\r\n                    percentage : this.state.percentage,\r\n                    started : true,\r\n                    continuousTest : this.state.continuousTest\r\n                })\r\n            }\r\n            else{\r\n                this.pevStrings[12].found = false\r\n                console.log(\"setTimedoutStartCommand | SEND start\")\r\n                this.pevSendStartCommand();\r\n                this.setState({  \r\n                    printOutCom : this.printOutCom,\r\n                    toggleToRefresh : !this.state.toggleToRefresh,\r\n                    role : this.state.role  ,\r\n                    percentage : this.state.percentage,\r\n                    started : true,\r\n                    continuousTest : this.state.continuousTest\r\n                })\r\n                clearInterval( this.timeoutStartInterval );\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n\r\n    setTimedoutStopCommand(timerValue){\r\n        var timeoutStopCounter = timerValue\r\n        this.timeoutStopInterval = setInterval(() => {\r\n            if(timeoutStopCounter-- > 0){\r\n                this.pevStrings[11].display = \"Disconnecting in \"+timeoutStopCounter+\" sec(s).\"\r\n                this.pevStrings[11].found = true\r\n                console.log(\"setInterval | set text to \",this.pevStrings[11].display)\r\n                this.setState({  \r\n                    printOutCom : this.printOutCom,\r\n                    toggleToRefresh : !this.state.toggleToRefresh,\r\n                    role : this.state.role  ,\r\n                    percentage : this.state.percentage,\r\n                    started : true,\r\n                    continuousTest : this.state.continuousTest\r\n                })\r\n            }\r\n            else{\r\n                console.log(\"setInterval | SEND Stop\")\r\n                this.pevSendStopCommand();\r\n                this.pevStrings[11].found = false\r\n                this.setTimedoutStartCommand(20);\r\n                clearInterval( this.timeoutStopInterval );\r\n            }\r\n        }, 1000);\r\n    }\r\n  \r\n  \r\n    componentDidMount(){\r\n        this.OpenReadComPort();\r\n    }\r\n\r\n    ProcessSplittedCommand(sCommand){\r\n        if(sCommand.length > 5){\r\n            if(sCommand.includes(\"ROLE:PEV\"))\r\n            {\r\n                    this.role = \"PEV\";\r\n                    clearInterval(this.queryInterval);\r\n                    this.setState({  printOutCom : this.printOutCom,\r\n                                        toggleToRefresh : this.toggleToRefresh,\r\n                                        role : this.role  ,\r\n                                        percentage : this.state.percentage,\r\n                                        started : this.state.started,\r\n                                        continuousTest : this.state.continuousTest\r\n                                    })\r\n            }\r\n            else if(sCommand.includes(\"ROLE:EVSE\"))\r\n            {\r\n                    this.role = \"EVSE\";\r\n                    clearInterval(this.queryInterval);\r\n                    this.setState({  printOutCom : this.printOutCom,\r\n                                        toggleToRefresh : this.toggleToRefresh,\r\n                                        role : this.role ,\r\n                                        percentage : this.state.percentage,\r\n                                        started : this.state.started,\r\n                                        continuousTest : this.state.continuousTest  })\r\n            }else{\r\n                    let nowFound = false;\r\n                    for(let i=0;i<this.pevStrings.length;i++){\r\n                        if(sCommand.includes(this.pevStrings[i].details) && this.pevStrings[i].found === false){\r\n                            this.pevStrings[i].found = true\r\n                            nowFound = true\r\n                            //console.log(\"ProcessSplittedCommand sCommand i=\", i)\r\n                            if(i === 8)//Link Measurement\r\n                            {\r\n                                \r\n                                let measurementValue = sCommand.split(':')\r\n                                if(measurementValue.length>1){\r\n                                    this.pevStrings[8].display = \"Link Measurement: \"+Number(measurementValue[1].trim())+\"ms.\"\r\n                                    this.linkMeasurements.push(measurementValue[1].trim())\r\n                                }\r\n                            }\r\n                            else if(i === 10 && this.state.continuousTest === true)// IPv6 Message\r\n                            {\r\n                                //setTimeout(()=>{this.pevSendStopCommand()},15000);\r\n                                this.setTimedoutStopCommand(15);\r\n                            }else if(i === 11)// TIMEOUT\r\n                            {\r\n                                console.warn(\"ProcessSplittedCommand  | this.linkMeasurements.push(Timeout) \")\r\n                                this.linkMeasurements.push(\"Timeout\")\r\n                                if(this.state.continuousTest === true)\r\n                                {\r\n                                    this.setTimedoutStopCommand(5);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(nowFound === true){\r\n                        console.warn(\"OKKKKKKKK\")\r\n                        let percCalc = this.state.percentage + ((1 / (this.pevStrings.length-2)) * 100)\r\n                        if(percCalc >= 90)\r\n                            percCalc = 100;\r\n                        \r\n                        percCalc = Math.round(percCalc)\r\n\r\n                        this.setState({  \r\n                            printOutCom : this.printOutCom,\r\n                            toggleToRefresh : !this.state.toggleToRefresh,\r\n                            role : this.role  ,\r\n                            percentage : percCalc,\r\n                            started : true,\r\n                            continuousTest : this.state.continuousTest\r\n                        })\r\n                    }\r\n            }\r\n        }\r\n        \r\n\r\n                       \r\n    }\r\n\r\n\r\n\r\n    ProcessRawData(){\r\n        let commandArray = this.rawData.split('*')\r\n        if(commandArray.length>1){\r\n            commandArray.forEach(item=>{\r\n                this.ProcessSplittedCommand(item)\r\n            })\r\n            this.rawData = commandArray[commandArray.length-1]\r\n        }\r\n        \r\n    }\r\n\r\n    ReadValues(){\r\n        this.portReader.read().then(res=>{\r\n            console.log(\"VALUE \",res.value)\r\n            this.rawData += new TextDecoder(\"utf-8\").decode(res.value)\r\n            console.log(\"rawData \",this.rawData)\r\n            \r\n            setTimeout(this.ProcessRawData(),0);\r\n            this.ReadValues();\r\n        });\r\n    }\r\n\r\n    \r\n    async OpenReadComPort(){\r\n        console.log(\"OpenReadComPort | begin\")\r\n\r\n        console.log(\"Port..\",this.props.port)\r\n        const p_Port = this.props.port\r\n        try{\r\n            await p_Port.port.open({ baudRate: 115200});\r\n        }catch(e){\r\n            p_Port.port.close();\r\n            await p_Port.port.open({ baudRate: 115200});\r\n        }\r\n        \r\n        this.portReader = p_Port.port.readable.getReader();\r\n\r\n        this.portWriter = p_Port.port.writable.getWriter();\r\n        \r\n\r\n        setTimeout(()=>{\r\n            this.ReadValues()\r\n        },0)\r\n\r\n        const data = new Uint8Array([114]); // r\r\n        this.portWriter.write(data).then(res=>{\r\n        });\r\n        console.log(\"ask role\")\r\n        \r\n       \r\n        console.log(\"OpenReadComPort | end\")\r\n    }\r\n\r\n\r\n    constructor(props){\r\n        super(props)\r\n        \r\n        \r\n        this.theme = responsiveFontSizes(createMuiTheme(\r\n            {typography: {\r\n                h1: {\r\n                    fontSize: 200,\r\n                },\r\n                h2: {\r\n                    fontSize: 15,\r\n                },\r\n            },}\r\n        ));\r\n        this.portReader = {}\r\n        this.portWriter = {}\r\n        this.rawData = \"\"\r\n        this.role = \"\"\r\n        this.state = {\r\n            printOutCom : \"\",\r\n            toggleToRefresh : false,\r\n            role : \"PEV\",\r\n            checked : false,  \r\n            percentage : 0,\r\n            started : false,\r\n            continuousTest : false\r\n          };\r\n\r\n        this.queryInterval = {}\r\n        this.initializePEVStrings()\r\n        this.pevSendStartCommand = this.pevSendStartCommand.bind(this)\r\n        this.pevSendStopCommand = this.pevSendStopCommand.bind(this)\r\n        this.handleContToggleSwitch = this.handleContToggleSwitch.bind(this)\r\n        this.showDetailedProgress = this.showDetailedProgress.bind(this)\r\n        this.showLinkPanel = this.showLinkPanel.bind(this)\r\n        this.setContinuosState = this.setContinuosState.bind(this)\r\n        this.resetLinkMeasurementsList = this.resetLinkMeasurementsList.bind(this)\r\n        this.linkMeasurements = []\r\n        \r\n        this.timeoutStartInterval = {}\r\n        this.timeoutStopInterval = {}\r\n        \r\n\r\n    }\r\n\r\n    resetLinkMeasurementsList(){\r\n        this.linkMeasurements = []\r\n        this.setState({  \r\n            printOutCom : this.printOutCom,\r\n            toggleToRefresh : !this.state.toggleToRefresh,\r\n            role : this.state.role  ,\r\n            percentage : this.state.percentage,\r\n            started : this.state.started,\r\n            continuousTest : this.state.continuousTest\r\n        })\r\n    }\r\n  \r\n    showDetailedProgress(){\r\n        if(this.pevStrings != null && this.pevStrings.length > 0)\r\n        {\r\n            \r\n            return this.pevStrings.map((value,index)=>{\r\n                if(value.found)\r\n                {\r\n                    if(value.warning === false){\r\n                        return(\r\n                            <p key={\"detailed_\"+index}>\r\n                                {value.display}{index<15 ? \".......................................OK\" : \"\"}\r\n                            </p>\r\n                        );\r\n                    }\r\n                    else{\r\n                        return(\r\n                            <p key={\"detailed_\"+index} style={{color:'#c20b0b',\r\n                                                               textShadow: '0 0 0.4em #c20b0b'\r\n                                                               }} id='warningTextFeature'>\r\n                                {value.display}\r\n                            </p>\r\n                        );\r\n                    }\r\n                }else{\r\n                    return null;\r\n                }\r\n            })\r\n              \r\n        }\r\n        else{\r\n            return null;\r\n        }\r\n    }\r\n    showLinkPanel(){\r\n        console.log(\"Show Link Panel\",this.linkMeasurements.length)\r\n        if(this.linkMeasurements != null && this.linkMeasurements.length > 0)\r\n        { \r\n            return(\r\n                <div  id='linkpanelid1'>\r\n                <div className=\"ui panel\">\r\n                    <div className=\"ui panel content\">\r\n                    {\r\n                        this.linkMeasurements.map((value,index)=>{\r\n                            if(value === \"Timeout\")\r\n                            {\r\n                                return(\r\n                                    <div key={'mydivkey'+index}>\r\n                                    <strong key={'mykey'+index} style={{color:'#c20b0b',\r\n                                                               textShadow: '0 0 0.4em #c20b0b'\r\n                                                               }} >{value}</strong><br /> \r\n                                    </div>\r\n                                );\r\n                            }\r\n                            else{\r\n                                return(\r\n                                    <div key={'mydivkey'+index}>\r\n                                    <strong key={'mykey'+index}>Link Time</strong> {value} ms.<br /> \r\n                                    </div>\r\n                                );\r\n                            }\r\n                            \r\n                        })\r\n                    }    \r\n                    <div style = {{ textAlign:'right' , justifyContent: 'right' , float: 'right' , height: '50px', width: '50px' }}> <div  className='linkMeasurementsReset ' onClick={this.resetLinkMeasurementsList} /> </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return null;\r\n        }\r\n    }\r\n\r\n    setContinuosState(){\r\n        this.setState({  printOutCom : this.printOutCom,\r\n            toggleToRefresh : this.state.toggleToRefresh,\r\n            role : this.state.role  ,\r\n            percentage : this.state.percentage,\r\n            started : this.state.started,\r\n            continuousTest : !this.state.continuousTest\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1 className=\"cs\">FoE-Charger</h1>\r\n                    <div className=\"circle cir\"><p className=\"c\">F</p>\r\n                    <div className=\"circle one\"></div>\r\n                    <div className=\"circle two\">\r\n                        <div className=\"circle three\">\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n\r\n                    <div className=\"wrapper\">\r\n                    <div className=\"bar left\"></div>\r\n                    <div className=\"bar top\"></div>\r\n                    <div className=\"bar right\"></div>\r\n                    <div className=\"bar bottom\"></div>\r\n                    <br/>\r\n                    <Grid container>\r\n                    <Grid item xs={2}>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                    <div className='Action_button_1' onClick={this.pevSendStartCommand}/>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                    <div className='Action_button_2' onClick={this.pevSendStopCommand}/>\r\n                    </Grid>\r\n                    <Grid item xs={2} >\r\n                        <div style={{marginTop: '20px'}}>\r\n                            <span className='continuousText'>Continuous Test</span>\r\n                            {\r\n                                this.state.continuousTest ? \r\n                                    <div style={{marginLeft: '30px'}} className='continuousSelectionSelected' onClick={this.setContinuosState} />: \r\n                                    <div style={{marginLeft: '30px'}} className='continuousSelectionUnselected' onClick={this.setContinuosState} /> \r\n                            }\r\n                            \r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                    </Grid>\r\n                    <Grid item xs={2} >\r\n                        <div className='parentWheel'>\r\n                            <div className='Outer_wheel'/>\r\n                            <div className='Wheel_Base'/>\r\n                            {this.state.started ? <div className='Ineer_wheel Ineer_wheel_Animation'/> : <div className='Ineer_wheel'/>}\r\n                            <div className='Percentage_wheel'><span id='percentage'>{this.state.percentage}</span>%</div>\r\n                        </div>\r\n                    \r\n                    </Grid>\r\n                    </Grid>\r\n                    \r\n                    \r\n                    <Grid container>\r\n                    <Grid item xs={6}>\r\n                        {this.showDetailedProgress()}\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                    {this.showLinkPanel()}\r\n                    </Grid>\r\n                    </Grid>                \r\n                    \r\n                    </div>\r\n            </div>\r\n            );\r\n    }\r\n\r\n/*\r\n<ol className=\"timeline\">\r\n                        <li>list item</li>\r\n                        <li>list item</li>\r\n                    </ol>\r\n*/\r\n\r\n}\r\nexport default DeviceState","import React from \"react\";\r\nimport SlideToggle from \"react-slide-toggle\";\r\nimport './Header.css'\r\n\r\nimport { Link ,BrowserRouter} from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"bodyWrapper\">\r\n    <header>\r\n      <div className=\"signBlock\">\r\n        <div className=\"topCover\"></div>\r\n          <div className=\"headerContent\">\r\n            <div className=\"headerLinks\">\r\n            <h1>PONTIS EMC</h1>\r\n                <div className=\"signLinks\">\r\n                <h3>Test Web Interface</h3>\r\n                </div>       \r\n            </div>\r\n          </div>\r\n            <div className=\"boxEdges1\">\r\n              <div className=\"boxEdges2\">\r\n                <div className=\"slider\"></div>\r\n                <div className=\"headerLine\"></div>\r\n              </div>\r\n            </div>\r\n        </div>\r\n    </header>\r\n    <SlideToggle>\r\n    {({ toggle, setCollapsibleElement }) => (\r\n      <div className=\"my-collapsible\">\r\n          <div id=\"navButton\" className=\"open\" onClick={toggle}>- Menu -   \r\n          <div className=\"bar left\"></div>\r\n          <div className=\"bar top\"></div>\r\n          <div className=\"bar right\"></div>\r\n          <div className=\"bar bottom\"></div>\r\n        </div>\r\n        <div className=\"my-collapsible__content\" ref={setCollapsibleElement}>\r\n          <div className=\"my-collapsible__content-inner\">\r\n          <div className='navContent'>\r\n            <Link to=\"index\">Testing</Link> | \r\n            <Link to=\"about\">About</Link> | \r\n            <Link to=\"contact\">Contact</Link>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )}\r\n  </SlideToggle>\r\n    <body-container>\r\n    </body-container>\r\n    <footer>\r\n    </footer>\r\n  </div>\r\n  );\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport './Contact.css'\r\n\r\nvar counter = 0\r\nvar text = \"Ex aliquip nisi velit eu quis Lorem ullamco labore irure veniam. Excepteur non velit nisi qui sint ad excepteur. Do sit proident occaecat ea ullamco nostrud exercitation incididunt qui cupidatat consectetur. Id veniam cillum dolore sunt duis minim cupidatat eu.Sunt consequat excepteur tempor do elit non cillum ex incididunt. Dolor qui incididunt qui cupidatat laborum officia duis pariatur occaecat cupidatat aliqua Lorem laborum. Commodo dolor ad eu anim nostrud veniam sunt velit. Do amet sit ea tempor sint adipisicing magna exercitation commodo laboris veniam commodo. Laboris nulla ipsum in incididunt non incididunt exercitation proident qui occaecat cupidatat ipsum aliqua aliqua. Pariatur eu Lorem nostrud exercitation nulla ea minim laborum amet cupidatat officia adipisicing. Fugiat dolore est qui voluptate incididunt aute fugiat non laborum.\"\r\n\r\nexport default function Header() {\r\n    const [textVal,setTextVal] = React.useState(\"\");\r\n\r\n   \r\n    useEffect(() => {\r\n      const interval = setInterval(() => {\r\n        counter++;\r\n        if(counter<text.length){\r\n          setTextVal(text.substr(0,counter))\r\n        }\r\n      }, 50);\r\n      return () => clearInterval(interval);\r\n    }, []);\r\n\r\n\r\n    return (\r\n      <div>\r\n          {textVal}<span className='blinker'>&#32;</span>\r\n      </div>\r\n    );\r\n  }\r\n  ","import React, { useEffect } from 'react';\r\nimport './About.css'\r\n\r\nvar counter = 0\r\nvar text = \"Ipsum esse anim dolor in aliqua. Consectetur ad nostrud nisi ea dolor pariatur. Irure fugiat ipsum adipisicing incididunt eu sint nulla. Nisi fugiat magna eiusmod nostrud consequat fugiat velit labore duis occaecat Lorem aliquip. Duis aliqua id do cillum occaecat occaecat aliquip deserunt. Cillum incididunt magna excepteur est quis proident in aute amet est in mollit.\"\r\n\r\nexport default function About() {\r\n    const [textVal,setTextVal] = React.useState(\"\");\r\n\r\n   \r\n    useEffect(() => {\r\n      const interval = setInterval(() => {\r\n        counter++;\r\n        if(counter<text.length){\r\n          setTextVal(text.substr(0,counter))\r\n        }\r\n      }, 50);\r\n      return () => clearInterval(interval);\r\n    }, []);\r\n\r\n\r\n    return (\r\n      <div>\r\n          {textVal}<span className='blinker'>&#32;</span>\r\n      </div>\r\n    );\r\n  }\r\n  ","import React, {Component} from \"react\";\r\nimport DeviceState from './components/DeviceState/DeviceState'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport Header from \"./components/Header/Header\"\r\nimport Contact from \"./components/Contact/Contact\"\r\nimport About from \"./components/About/About\"\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\nclass App extends Component{\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      p1 :\r\n        {id: 1, selected : false, port : {},onClickHandler:this.selectCom1},\r\n      p2 :\r\n        {id: 2, selected : false, port : {},onClickHandler:this.selectCom2},\r\n      supported : false\r\n    };\r\n\r\n    this.selectCom1 = this.selectCom1.bind(this)\r\n    this.selectCom2 = this.selectCom2.bind(this)\r\n  }\r\n  \r\n\r\n  \r\n  \r\n  async componentDidMount(){\r\n    try{\r\n    console.log(\"list of serial ports the website has been granted access to previously\",navigator.serial.getPorts())\r\n\r\n      const portList = await navigator.serial.getPorts()\r\n    \r\n      if(portList.length === 2){\r\n        this.setState(\r\n          {\r\n            p1 : {id: portList[0].id, selected : true, port : portList[0]},\r\n            p2 : {id: portList[1].id, selected : false, port : portList[1]},\r\n            supported : true\r\n          }\r\n        )\r\n      }else if(portList.length === 1){\r\n        this.setState(\r\n          {\r\n            p1 : {id: portList[0].id, selected : true, port : portList[0]},\r\n            p2 : this.state.p2,\r\n            supported : true\r\n          }\r\n        )\r\n      }else{\r\n        this.setState(\r\n          {\r\n            p1 : this.state.p1,\r\n            p2 : this.state.p2,\r\n            supported : true\r\n          }\r\n        )\r\n      }\r\n    }catch(err){\r\n      let bSupport = false;\r\n      if(err.message === \"Cannot read property 'getPorts' of undefined\")\r\n        bSupport = false\r\n      else\r\n        bSupport = true\r\n\r\n      this.setState(\r\n        {\r\n          p1 : this.state.p1,\r\n          p2 : this.state.p2,\r\n          supported : bSupport\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n  async AskUserForComport(slotId){\r\n    try {\r\n      \r\n      switch(slotId){\r\n      case 1:\r\n        if(!this.state.p1.selected){\r\n          console.log(\"list of serial ports the website has been granted access to previously\",navigator.serial.getPorts())\r\n          const p1 = await navigator.serial.requestPort()\r\n          console.log(\"AskUserForComport p1\",p1)\r\n          this.setState(\r\n            {\r\n              p1 : {id: this.state.p1.id, selected : true, port : p1},\r\n              p2 : this.state.p2,\r\n              supported : this.state.supported\r\n            }\r\n          )\r\n\r\n        }\r\n        break;\r\n\r\n      case 2:\r\n        if(!this.state.p2.selected){\r\n          const p2 = await navigator.serial.requestPort()\r\n          \r\n          this.setState(\r\n            {\r\n              p1 : this.state.p1,\r\n              p2 : {id: this.state.p2.id, selected : true, port : p2},\r\n              supported : this.state.supported\r\n            }\r\n          )\r\n\r\n        }\r\n        break;\r\n        default:\r\n          console.error(\"Default switch-case\")\r\n          break;\r\n    }\r\n  } catch (err) {\r\n    console.log(\"An error was caught: \", err);\r\n  }\r\n  }\r\n \r\n\r\n  async selectCom1(){\r\n      this.AskUserForComport(1)   \r\n  }\r\n\r\n\r\n  async selectCom2(){\r\n      this.AskUserForComport(2)   \r\n  }\r\n\r\n\r\n  tryToCloseComPort(){\r\n    try{\r\n      if(this.state.p1.selected === true){\r\n        try {\r\n           this.state.p1.port.close();\r\n        } catch (e) {\r\n        }\r\n        \r\n    }\r\n    }catch(err){\r\n      console.error(err)  \r\n    }\r\n  }\r\n\r\n  prepareComPortSelectButtons(){\r\n    console.log(\"Create Message box\")\r\n    if(this.state.supported){\r\n      if(this.state.p1.selected === false)\r\n      return(\r\n        <div className='parentMessageBox'>\r\n            <div className='messageBoxSelectButton' onClick={this.selectCom1} key=\"c1\"/>\r\n        </div>  \r\n        )\r\n      else\r\n        return null;\r\n    }else{\r\n      return(\r\n        <div>\r\n          <div className='warningMessageBox'>\r\n          </div>  \r\n        </div>\r\n        )\r\n    }\r\n    \r\n  }\r\n\r\n\r\n  render(){\r\n    console.log(\"render....\")\r\n  return (\r\n    <div >\r\n      \r\n      <BrowserRouter>\r\n      <Header/>\r\n      <Switch>\r\n        <Route exact path=\"/contact\">\r\n          <Contact />\r\n        </Route>\r\n        <Route exact path=\"/about\">\r\n          <About />\r\n        </Route>\r\n        <Route exact path=\"/index\">\r\n          {this.prepareComPortSelectButtons()}\r\n          <Grid container justify='center'>\r\n            <Grid item xs={12}>\r\n              <div>\r\n                {this.state.p1.selected === true ? <DeviceState port={this.state.p1}/ > : null}\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Route>\r\n      </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}